const fs = require('fs');
const path = require('path');
{{#if isMongoDB}}
const Mongoose = require('mongoose');
{{else}}
const Sequelize = require('sequelize');
{{/if}}

const databasesConfiguration = [{
  name: 'default',
  modelsDir: '.',
  connection: {
    url: process.env.DATABASE_URL
  }
}];

const modelsByDatabase = {};
const db = {};

databasesConfiguration.forEach((databaseInfo) => {
  const databaseOptions = {
    {{#if isMongoDB}}
    useNewUrlParser: true,
    useUnifiedTopology: true,
    {{else}}
    logging: process.env.NODE_ENV === 'development' || !process.env.NODE_ENV ? console.log : false,
    pool: { maxConnections: 10, minConnections: 1 },
    dialectOptions: {},
    {{/if}}
  };
  {{#if isMySQL}}
  databaseOptions.dialectOptions.typeCast = (field, useDefaultTypeCasting) => {
    if ((field.type === "BIT") && (field.length === 1)) {
      const bytes = field.buffer();
      return bytes ? bytes[0] === 1 : bytes;
    }

    return useDefaultTypeCasting();
  };
  {{/if}}
  {{#unless isMongoDB}}
  if (process.env.DATABASE_SSL && JSON.parse(process.env.DATABASE_SSL.toLowerCase())) {
    {{#if isMySQL}}
    databaseOptions.dialectOptions.ssl = { rejectUnauthorized: true };
    {{else if isMSSQL}}
    databaseOptions.dialectOptions.options = { encrypt: true };
    {{else}}
    const rejectUnauthorized = process.env.DATABASE_REJECT_UNAUTHORIZED;
    if (rejectUnauthorized && (JSON.parse(rejectUnauthorized.toLowerCase()) === false)) {
      databaseOptions.dialectOptions.ssl = { rejectUnauthorized: false };
    } else {
      databaseOptions.dialectOptions.ssl = true;
    }
{{/if}}
  }
  {{/unless}}

  {{#if isMongoDB}}
  const connection = Mongoose.createConnection(databaseInfo.connection.url, databaseOptions);
  {{else}}
  const connection = new Sequelize(databaseInfo.connection.url, databaseOptions);
  {{/if}}

  modelsByDatabase[databaseInfo.name] = connection;
  const modelsDir = databaseInfo.modelsDir || databaseInfo.name;
  fs
    .readdirSync(path.join(__dirname, modelsDir))
    .filter((file) => file.indexOf('.') !== 0 && file !== 'index.js')
    .forEach((file) => {
      try {
        {{#if isMongoDB}}
        const model = require(path.join(__dirname, modelsDir, file))(connection, Mongoose);
        {{else}}
        const model = connection.import(path.join(__dirname, file));
        {{/if}}
        db[model.name] = model;
      } catch (error) {
        console.error('Model creation error: ' + error);
      }
    });
});

{{#if isMongoDB}}
db.mongoose = modelsByDatabase;
db.Mongoose = Mongoose;
{{else}}
db.sequelize = modelsByDatabase;
db.Sequelize = Sequelize;
{{/if}}

module.exports = db;