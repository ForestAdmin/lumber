// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const {{modelName}} = sequelize.define('{{table}}', {
{{#each fields as |field|}}
    {{field.name}}: {
      type: DataTypes.{{{field.type}}},{{#if field.nameColumnUnconventional}}
      field: '{{field.nameColumn}}',{{/if}}{{#if field.primaryKey}}
      primaryKey: true,{{/if}}{{#if field.defaultValue}}
      defaultValue: Sequelize.literal('{{{field.defaultValue}}}'),{{/if}}
    },
{{/each}}
  }, {
    tableName: '{{table}}',{{#if underscored}}
    underscored: true,{{/if}}{{#unless timestamps}}
    timestamps: false,{{/unless}}{{#if schema}}
    schema: process.env.DATABASE_SCHEMA,{{/if}}
  });
{{#if noId}}  {{modelName}}.removeAttribute('id');{{/if}}
  {{modelName}}.associate = (models) => {
    {{#each references as |reference|}}
    {{#if reference.isBelongsTo}}
    {{../modelName}}.belongsTo(models.{{reference.ref}}, {
      foreignKey: {
        name: '{{reference.foreignKeyName}}',{{#if reference.foreignKeyColumnUnconventional}}
        field: '{{reference.columnName}}',{{/if}}
      },{{#if reference.targetKey }}
      target: {
        name: '{{reference.targetKey}}',{{#if reference.targetKeyColumnUnconventional}}
        field: '{{reference.targetKey}}',{{/if}}
      },{{/if}}{{#if reference.as}}
      as: '{{reference.as}}',{{/if}}
    });
    {{/if}}
    {{#if reference.isHasOneOrHasMany}}
    {{../modelName}}.{{reference.association}}(models.{{reference.ref}}, {
      foreignKey: {
        name: '{{reference.foreignKeyName}}',{{#if reference.foreignKeyColumnUnconventional}}
        field: '{{reference.columnName}}',{{/if}}
      },{{#if reference.targetKey }}
      target: {
        name: '{{reference.targetKey}}',{{#if reference.targetKeyColumnUnconventional}}
        field: '{{reference.targetKey}}',{{/if}}
      },{{/if}}{{#if reference.as}}
      as: '{{reference.as}}',{{/if}}
    });
    {{/if}}
    {{#if reference.isBelongsToMany}}
    {{../modelName}}.belongsToMany(models.{{reference.junctionTable}}, {
      through: '{{reference.ref}}',
      foreignKey: '{{reference.columnName}}',
      otherKey: '{{reference.otherKey}}',
    });
    {{/if}}
    {{/each}}
  };

  return {{modelName}};
};
