const gql = require('apollo-server-express').gql;
const models = require('../models');
<% if (dialect === 'mongodb') { %>const Liana = require('forest-express-mongoose');<% } else { %>const Liana = require('forest-express-sequelize');<% } %>

const { GraphQLDateTime } = require('graphql-iso-date');
const GraphQLJSON = require('graphql-type-json');

module.exports = function (opts) {
  this.getSchema = function () {
    return gql`
      extend type Query {
        count_<%= table %>(search: String, filter: JSON): Int
        list_<%= table %>(page: JSON, sort: String, search: String, filter: JSON): [<%= table %>!]
        get_<%= table %>(id: ID!): <%= table %>
      }

      extend type Mutation {
        create_<%= table %>(<% _.each(fields, (field) => { %>
          <%= field.name %>: <%= field.graphqlType %>,<% }) %>
        ): <%= table %>

        update_<%= table %>(<% _.each(fields, (field) => { %>
          <%= field.name %>: <%= field.graphqlType %>,<% }) %>
        ): <%= table %>

        delete_<%= table %>(id: ID!): Boolean
      }

      type <%= table %> {<% if (primaryKeys.indexOf('id') > -1) { %>
        id: ID!<% } %><% _.each(fields, (field) => { %>
        <%= field.name %>: <%= field.graphqlType %><% }) %><% _.each(references, (reference) => { %>
        <%= reference.as %>: <%= reference.ref %><% }); %>
      }
    `;
  };

  this.getResolver = function () {
    return {
      DateTime: GraphQLDateTime,
      JSON: GraphQLJSON,
      Query: {
        count_<%= table %>: async (obj, params) => {
          if (!params.filterType) { params.filterType = 'and'; }
          if (!params.timezone) { params.timezone = 'Europe/London'; }

          return await new Liana.ResourcesGetter(models.<%= table %>, opts, params).count();
        },
        list_<%= table %>: async (obj, params) => {
          if (!params.filterType) { params.filterType = 'and'; }
          if (!params.timezone) { params.timezone = 'Europe/London'; }

          const r = await new Liana.ResourcesGetter(models.<%= table %>, opts, params).perform();
          return r[0];
        },
        get_<%= table %>: async (obj, { id }, context, info) => {
          return await new Liana.ResourceGetter(models.<%= table %>, { recordId: id }).perform();
        },
      },
      Mutation: {
        create_<%= table %>: async (obj, params) => {
          return await new Liana.ResourceCreator(models.<%= table %>, params).perform();
        },
        update_<%= table %>: async (obj, params) => {
          return await new Liana.ResourceUpdater(models.<%= table %>, { recordId: params.id }, params).perform();
        },
        delete_<%= table %>: async (obj, params) => {
          return await new Liana.ResourceRemover(models.<%= table %>, { recordId: params.id }).perform();
        },
      }
    }
  };
}

