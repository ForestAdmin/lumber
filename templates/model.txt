// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v4/reference-guide/models/enrich-your-models
<% if (dialect === 'mongodb') {
%>const mongoose = require('mongoose');

// This section contains the properties of your model, mapped to your collection's properties.
// Learn more here: https://docs.forestadmin.com/documentation/v/v4/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
const schema = mongoose.Schema({<% _.each(fields, (field) => { %>
  '<%= field.name %>': <%= field.type %>,<% }); %>
}, {
  timestamps: <%= timestamps %>,
});

module.exports = mongoose.model('<%= table %>', schema, '<%= table %>');
<% } else {
%>module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v4/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const <%= modelName %> = sequelize.define('<%= table %>', {<% _.each(fields, (field) => { %>
    <%= field.name %>: {
      type: DataTypes.<%= field.type %>,<% if (field.nameColumnUnconventional) { %>
      field: '<%= field.nameColumn %>',<% } %><% if (field.primaryKey) { %>
      primaryKey: true,<% } %><% if (field.defaultValue) { %>
      defaultValue: Sequelize.literal('<%= field.defaultValue %>'),<% } %>
    },<% }) %>
  }, {
    tableName: '<%= table %>',<% if (underscored) { %>
    underscored: true,<% } %><% if (!timestamps) { %>
    timestamps: false,<% } %><% if (schema) { %>
    schema: process.env.DATABASE_SCHEMA,<% } %>
  });
<%if (!hasIdColumn && !hasPrimaryKeys) {%>
  <%= modelName %>.removeAttribute('id');
<% } %>
  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v4/reference-guide/relationships#adding-relationships.
  <%= modelName %>.associate = (models) => {<% _.each(references, (reference) => { %>
    <%= modelName %>.belongsTo(models.<%= reference.ref %>, {
      foreignKey: {
        name: '<%= reference.foreignKeyName %>',<% if (reference.foreignKeyColumnUnconventional) { %>
        field: '<%= reference.foreignKey %>',<% } %>
      },<% if (reference.targetKey) { %>
      target: {
        name: '<%= reference.targetKey %>',<% if (reference.targetKeyColumnUnconventional) { %>
        field: '<%= reference.targetKey %>',<% } %>
      },<% } %><% if (reference.as) { %>
      as: '<%= reference.as %>',<% } %>
    });<% }); %>
  };

  return <%= modelName %>;
};
<% } %>
