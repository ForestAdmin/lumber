const P = require('bluebird');
const program = require('commander');
const chalk = require('chalk');
const DB = require('./services/db');
const TableAnalyzer = require('./services/table-analyzer');
const Migrator = require('./services/migrator');
const Prompter = require('./services/prompter');
const logger = require('./services/logger');

program
  .description('Update your models\' definition according to your database schema')
  .option('-c, --connection-url', 'Enter the database credentials with a connection URL')
  .option('-d, --source-directory <sourceDirectory>', 'The directory of your back office generated by Lumber')
  .parse(process.argv);

(async () => {
  if (process.env.DATABASE_URL) {
    program.connectionUrl = true;
  }

  const config = await Prompter(program, [
    'dbConnectionUrl',
    'dbDialect',
    'dbName',
    'dbSchema',
    'dbHostname',
    'dbPort',
    'dbUser',
    'dbPassword',
    'dbStorage',
    'mongodbSrv',
    'ssl',
  ]);

  if ((config.dbConnectionUrl && config.dbConnectionUrl.startsWith('mongodb')) || config.dbDialect === 'mongodb') {
    logger.error('ðŸ’€  The lumber update command is not yet supported on MongoDB. ðŸ’€');
    process.exit(1);
  }

  const db = await new DB().connect(config);
  const schema = await new TableAnalyzer(db, config).perform();
  const migrator = new Migrator(config);

  // Detect new tables.
  const newTables = await migrator.detectNewTables(schema);
  await P.mapSeries(newTables, async (table) => {
    console.log(`New table detected: ${chalk.green(table)}`);
    const modelPath = await migrator.createModel(schema, table);
    console.log(`   ${chalk.green('âœ”')} Model created: ${chalk.green(modelPath)}`);
  });

  // Detect new fields.
  const newFields = await migrator.detectNewFields(schema);
  await P.mapSeries(Object.keys(newFields), async (table) => {
    await P.mapSeries(newFields[table], async (field) => {
      console.log(`New field detected: ${field.name}`);
      const modelPath = await migrator.createField(table, field);
      console.log(`   ${chalk.green('âœ”')} Field added: ${chalk.green(modelPath)}`);
    });
  });

  console.log(chalk.green('Your admin is up to date.'));
  process.exit(0);
})().catch((error) => {
  logger.error('ðŸ’€  Oops, operation aborted ðŸ’€ due to the following error: ', error);
  process.exit(1);
});
